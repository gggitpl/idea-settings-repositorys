<application>
  <component name="AppStorage">
    <histories>
      <item value="// Default methods are public non-abstract, non-synthetic, and non-static instance methods // declared in an interface. // method.isDefault() is not sufficient for our usage as it does not check // for synthetic methods. As a result, it picks up overridden methods as well as actual default // methods." />
      <item value="&quot;description&quot;: &quot;Enables the use of the OK HTTP Client by Feign.&quot;," />
      <item value="&quot;description&quot;: &quot;If true, an OpenFeign client will be wrapped with a Hystrix circuit breaker.&quot;," />
      <item value="&quot;sourceType&quot;: &quot;org.springframework.cloud.openfeign.support.FeignHttpClientProperties&quot;," />
      <item value="&quot;description&quot;: &quot;Enables the use of the Apache HTTP Client by Feign.&quot;," />
      <item value="&quot;description&quot;: &quot;Enables the response from Feign to be compressed.&quot;," />
      <item value="&quot;description&quot;: &quot;Enables the request sent by Feign to be compressed.&quot;," />
      <item value="SecurityContextHolder now cleared, as request processing completed" />
      <item value="RunAsManager did not change Authentication object" />
      <item value="Authorization successful" />
      <item value="SECONDS" />
      <item value="&quot;description&quot;: &quot;Deprecated property to enable Ribbon RestClient.&quot;," />
      <item value="&quot;sourceType&quot;: &quot;org.springframework.cloud.netflix.ribbon.RibbonEagerLoadProperties&quot;," />
      <item value="{ &quot;groups&quot;: [ { &quot;name&quot;: &quot;ribbon&quot;, &quot;type&quot;: &quot;org.springframework.cloud.netflix.ribbon.ServerIntrospectorProperties&quot;, &quot;sourceType&quot;: &quot;org.springframework.cloud.netflix.ribbon.ServerIntrospectorProperties&quot; }, { &quot;name&quot;: &quot;ribbon.eager-load&quot;, &quot;type&quot;: &quot;org.springframework.cloud.netflix.ribbon.RibbonEagerLoadProperties&quot;, &quot;sourceType&quot;: &quot;org.springframework.cloud.netflix.ribbon.RibbonEagerLoadProperties&quot; } ], &quot;properties&quot;: [ { &quot;name&quot;: &quot;eureka.client.healthcheck.enabled&quot;, &quot;type&quot;: &quot;java.lang.Boolean&quot;, &quot;description&quot;: &quot;Enables the Eureka health check handler.&quot;, &quot;defaultValue&quot;: true }, { &quot;name&quot;: &quot;ribbon.eager-load.clients&quot;, &quot;type&quot;: &quot;java.util.List&lt;java.lang.String&gt;&quot;, &quot;sourceType&quot;: &quot;org.springframework.cloud.netflix.ribbon.RibbonEagerLoadProperties&quot; }, { &quot;name&quot;: &quot;ribbon.eager-load.enabled&quot;, &quot;type&quot;: &quot;java.lang.Boolean&quot;, &quot;sourceType&quot;: &quot;org.springframework.cloud.netflix.ribbon.RibbonEagerLoadProperties&quot;, &quot;defaultValue&quot;: false }, { &quot;name&quot;: &quot;ribbon.http.client.enabled&quot;, &quot;type&quot;: &quot;java.lang.Boolean&quot;, &quot;description&quot;: &quot;Deprecated property to enable Ribbon RestClient.&quot;, &quot;defaultValue&quot;: false }, { &quot;name&quot;: &quot;ribbon.okhttp.enabled&quot;, &quot;type&quot;: &quot;java.lang.Boolean&quot;, &quot;description&quot;: &quot;Enables the use of the OK HTTP Client with Ribbon.&quot;, &quot;defaultValue&quot;: false }, { &quot;name&quot;: &quot;ribbon.restclient.enabled&quot;, &quot;type&quot;: &quot;java.lang.Boolean&quot;, &quot;description&quot;: &quot;Enables the use of the deprecated Ribbon RestClient.&quot;, &quot;defaultValue&quot;: false }, { &quot;name&quot;: &quot;ribbon.secure-ports&quot;, &quot;type&quot;: &quot;java.util.List&lt;java.lang.Integer&gt;&quot;, &quot;sourceType&quot;: &quot;org.springframework.cloud.netflix.ribbon.ServerIntrospectorProperties&quot; } ], &quot;hints&quot;: [] }" />
      <item value="### Digest authorization with variables." />
      <item value="* Constant to use while parsing and formatting parameter maps for OAuth2 requests" />
      <item value="requests" />
      <item value="and" />
      <item value="// parameters map will be stored without change in the AuthorizationRequest object once it is created." />
      <item value="// query off of the authorization request instead of referring back to the parameters map. The contents of the" />
      <item value="// Pull out the authorization request first, using the OAuth2RequestFactory. All further logic should" />
      <item value="to" />
      <item value="continue" />
      <item value="// gh-807 Approvals (if any) should only be removed when Refresh Tokens are removed (or expired)" />
      <item value="but" />
      <item value="reuse Refresh Token" />
      <item value="token Converter" />
      <item value="in" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="27" />
        <entry key="ENGLISH" value="27" />
        <entry key="CHINESE_TRADITIONAL" value="1" />
      </map>
    </option>
  </component>
</application>