<application>
  <component name="AppStorage">
    <histories>
      <item value="* @throws Exception ZK errors, connection interruptions" />
      <item value="* @return true if the mutex was acquired, false if not" />
      <item value="* @param unit time unit" />
      <item value="* @param time time to wait" />
      <item value="* @throws Throwable if the invoked proceed throws anything" />
      <item value="* @return the result of proceeding" />
      <item value="* @param connectionTimeoutMs connection timeout" />
      <item value="* @param sessionTimeoutMs session timeout" />
      <item value="max number of times to retry" />
      <item value="initial amount of time to wait between retries" />
      <item value="* @param maxSleepMs max time in ms to sleep on each retry" />
      <item value="* @param maxRetries max number of times to retry" />
      <item value="* @param baseSleepTimeMs initial amount of time to wait between retries" />
      <item value="//covers expired, locked, disabled cases (mentioned in section 5.2, draft 31)" />
      <item value="// If the username/password are wrong the spec says we should send 400/invalid grant" />
      <item value="&quot;Dummy filter chain&quot;" />
      <item value="// once-per-request handling, so don't re-do security checking" />
      <item value="// filter already applied to this request and user wants us to observe" />
      <item value="* @param chain the filter chain" />
      <item value="* Method that is actually called by the filter chain. Simply delegates to the" />
      <item value="* Checks the current authentication token and passes it to the AuthenticationManager" />
      <item value="* Processes a HTTP request's BASIC authorization headers, putting the result into the" />
      <item value="&quot;There is no client authentication. Try adding an appropriate authentication filter.&quot;);" />
      <item value="// A refresh token has its own default scopes, so we should ignore any added by the factory here." />
      <item value="Sets a new list of custom authentication filters for the TokenEndpoint. Filters will be set upstream of the * default BasicAuthenticationFilter." />
      <item value="Adds a new custom authentication filter for the TokenEndpoint. Filters will be set upstream of the default * BasicAuthenticationFilter." />
      <item value="super.setAuthenticated(true); // must use super, as we override" />
      <item value="* Constructor which sets the &lt;tt&gt;defaultTargetUrl&lt;/tt&gt; property of the base class." />
      <item value="// Use the DefaultSavedRequest URL" />
      <item value="Called by a class when it wishes a new authentication details instance to be * created." />
      <item value="* {@code RequestCache} which stores the {@code SavedRequest} in the HttpSession." />
      <item value="* Set the ApplicationEventPublisher that this object runs in." />
      <item value="* Indicates if the filter chain should be continued prior to delegation to" />
      <item value="Encapsulates the redirection logic for all classes in the framework which perform * redirects." />
      <item value="Responsible for reconstituting the saved request if one is cached and it matches the * current request." />
      <item value="* Performs Http session-related functionality when a new authentication occurs." />
      <item value="// return immediately as subclass has indicated that it hasn't completed // authentication" />
      <item value="If the request is already authenticated we can assume that this // filter is not needed" />
      <item value="/** * Filter base class that aims to guarantee a single execution per request * dispatch, on any servlet container. It provides a {@link #doFilterInternal} * method with HttpServletRequest and HttpServletResponse arguments. *" />
      <item value="// If authentication fails the type is &quot;Form&quot;" />
      <item value="authenticationManager must be specified" />
      <item value="// Unknown exception, typically a wrapper with a common MVC exception as cause // (since @ExceptionHandler type declarations also match first-level causes): // We only deal with top-level MVC exceptions here, so let's rethrow the given // exception for further processing through the HandlerExceptionResolver chain." />
      <item value="/** * Returns &lt;code&gt;true&lt;/code&gt; if this &lt;Code&gt;AuthenticationProvider&lt;/code&gt; supports the * indicated &lt;Code&gt;Authentication&lt;/code&gt; object. * &lt;p&gt; * Returning &lt;code&gt;true&lt;/code&gt; does not guarantee an * &lt;code&gt;AuthenticationProvider&lt;/code&gt; will be able to authenticate the presented * instance of the &lt;code&gt;Authentication&lt;/code&gt; class. It simply indicates it can * support closer evaluation of it. An &lt;code&gt;AuthenticationProvider&lt;/code&gt; can still * return &lt;code&gt;null&lt;/code&gt; from the {@link #authenticate(Authentication)} method to * indicate another &lt;code&gt;AuthenticationProvider&lt;/code&gt; should be tried. * &lt;/p&gt; * &lt;p&gt; * Selection of an &lt;code&gt;AuthenticationProvider&lt;/code&gt; capable of performing * authentication is conducted at runtime the &lt;code&gt;ProviderManager&lt;/code&gt;. * &lt;/p&gt; * * @param authentication * * @return &lt;code&gt;true&lt;/code&gt; if the implementation can more closely evaluate the * &lt;code&gt;Authentication&lt;/code&gt; class presented */" />
      <item value="// Default methods are public non-abstract, non-synthetic, and non-static instance methods // declared in an interface. // method.isDefault() is not sufficient for our usage as it does not check // for synthetic methods. As a result, it picks up overridden methods as well as actual default // methods." />
      <item value="&quot;description&quot;: &quot;Enables the use of the OK HTTP Client by Feign.&quot;," />
      <item value="&quot;description&quot;: &quot;If true, an OpenFeign client will be wrapped with a Hystrix circuit breaker.&quot;," />
      <item value="&quot;sourceType&quot;: &quot;org.springframework.cloud.openfeign.support.FeignHttpClientProperties&quot;," />
      <item value="&quot;description&quot;: &quot;Enables the use of the Apache HTTP Client by Feign.&quot;," />
      <item value="&quot;description&quot;: &quot;Enables the response from Feign to be compressed.&quot;," />
      <item value="&quot;description&quot;: &quot;Enables the request sent by Feign to be compressed.&quot;," />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="75" />
        <entry key="ENGLISH" value="76" />
        <entry key="CHINESE_TRADITIONAL" value="1" />
      </map>
    </option>
  </component>
</application>